{"version":3,"sources":["controllers/FileUploaderController.ts"],"names":[],"mappings":"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","file":"FileUploaderController.js","sourcesContent":["/// <reference path=\"../models/FileBlob.ts\" />\r\n\r\nnamespace FileUploaderApp.Controllers {\r\n    \"use strict\";\r\n\r\n    export class FileUploaderController {\r\n        public fileBlob: File;\r\n        url: string = \"/api/fileBlobs\";\r\n        public fileBlobs;\r\n\r\n        constructor(public $http: ng.IHttpService) {\r\n            this.Load();\r\n        }\r\n\r\n        public AddAttachment(event) {\r\n            let attachments = event.target.files;\r\n            if (attachments.length > 0) {\r\n                let file: File = attachments[0];\r\n\r\n                this.$http.get(this.url + \"/GetCorrelationId\").then((correlationId) => {\r\n                    let chunks = this.SplitFile(file);\r\n\r\n                    for (let i = 0; i < chunks.length; i++) {\r\n                        let formData = new FormData();\r\n                        formData.append(\"file\", chunks[i], file.name);\r\n                        formData.append(\"correlationId\", correlationId.data);\r\n                        formData.append(\"chunkNumber\", i + 1);\r\n                        formData.append(\"totalChunks\", chunks.length);\r\n\r\n                        this.$http.post(this.url, formData, { headers: { \"Content-Type\": undefined } }).then((result) => {\r\n                            if(result.data) {\r\n                                this.Load();\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        public DownloadFile(fileBlob: Models.IFileBlob) {\r\n            window.open(\"api/fileBlobs/\" + fileBlob.Id, '_blank');\r\n        }\r\n\r\n        private Load() {\r\n            this.$http.get(this.url).then((result) => {\r\n                this.fileBlobs = result.data;\r\n            })\r\n        };\r\n\r\n        private SplitFile(file: File): Array<Blob> {\r\n            let chunks = Array<Blob>();\r\n            let size = file.size;\r\n            let chunkSize = 1024 * 1024 * 10;\r\n            let start = 0;\r\n            let end = chunkSize;\r\n\r\n            while (start < size) {\r\n                let chunk = file.slice(start, end);\r\n                chunks.push(chunk);\r\n                start = end;\r\n                end += chunkSize;\r\n            }\r\n\r\n            return chunks;\r\n        }\r\n    }\r\n\r\n    FileUploader.module.controller(\"FileUploaderController\", FileUploaderController);\r\n}\r\n"]}